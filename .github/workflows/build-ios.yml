name: iOS IPA Build for App Store...

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Installer SVN
        run: |
          brew install subversion

      - name: Cloner le projet depuis SVN
        run: |
          echo "Téléchargement du code depuis SVN..."
          svn checkout --username "${{ secrets.SVN_USERNAME }}" --password "${{ secrets.SVN_PASSWORD }}" https://svn.jiscomputing.com/crmconnect_mobile/ project

      - name: Installer Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.24.1
          architecture: x64

      - name: Installer les dépendances Flutter
        run: |
          cd project
          flutter pub get

      - name: Corriger la version minimale iOS
        run: |
          cd project/ios
          sed -i '' 's/platform :ios, '9.0'/platform :ios, '12.0'/' Podfile
          pod install --repo-update

      - name: Décrypter le certificat et le profil de provisioning
        run: |
          mkdir -p certificates
          
          # Méthode différente de décodage pour le certificat
          # Ajouter une ligne vide à la fin pour assurer un décodage complet
          echo "${{ secrets.IOS_CERTIFICATE_P12 }}" > cert_base64.txt
          cat cert_base64.txt | base64 -d > certificates/ios_cert.p12
          
          # Décodage normal pour le profil de provisioning
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > certificates/profile.mobileprovision
          
          # Vérifier les fichiers
          ls -la certificates/
          echo "Taille du certificat P12: $(wc -c < certificates/ios_cert.p12) octets"
          echo "Taille du profil de provisioning: $(wc -c < certificates/profile.mobileprovision) octets"

      - name: Installer le certificat
        run: |
          # Créer un nouveau keychain
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"
          security create-keychain -p "temp_password" "$KEYCHAIN_PATH"
          security unlock-keychain -p "temp_password" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          
          # Rendre le keychain actif
          security list-keychains -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed 's/"//g')
          security default-keychain -s "$KEYCHAIN_PATH"
          
          # Importer le certificat
          security import certificates/ios_cert.p12 -k "$KEYCHAIN_PATH" -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -A -t cert -f pkcs12
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" "$KEYCHAIN_PATH"
          
          # Vérifier l'installation
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

      - name: Copier le profil de provisioning
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Analyser le profil pour obtenir son UUID
          UUID=$(security cms -D -i certificates/profile.mobileprovision | plutil -extract UUID xml1 -o - - | plutil -p -)
          UUID=${UUID//\"/}
          echo "UUID du profil: $UUID"
          
          # Renommer le profil avec son UUID
          cp certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${UUID}.mobileprovision

      - name: Compiler l application Flutter
        run: |
          cd project
          flutter build ios --release --no-codesign

      - name: Préparer le projet Xcode avec les bons paramètres de signature
        run: |
          cd project/ios
          
          # Obtenir les identifiants nécessaires
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"
          SIGNING_IDENTITY=$(security find-identity -p codesigning "$KEYCHAIN_PATH" | grep "iPhone Distribution" | head -1 | sed -E 's/.*\) ([A-F0-9]+) "(.*)"/\1/')
          TEAM_ID="${{ secrets.TEAM_ID }}"
          APP_BUNDLE_ID="${{ secrets.APP_BUNDLE_ID }}"
          
          # Créer un script temporaire pour modifier la configuration de signature
          cat > update_project_settings.rb << 'EOL'
          require 'xcodeproj'
          
          # Ouvrir le projet principal
          project_path = 'Runner.xcodeproj'
          project = Xcodeproj::Project.open(project_path)
          
          # Configuration pour le target principal seulement (Runner)
          main_target = project.targets.find { |target| target.name == 'Runner' }
          
          if main_target
            main_target.build_configurations.each do |config|
              if config.name == 'Release'
                config.build_settings['CODE_SIGN_IDENTITY'] = 'iPhone Distribution'
                config.build_settings['DEVELOPMENT_TEAM'] = ENV['TEAM_ID']
                config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROVISIONING_PROFILE_NAME']
                config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
              end
            end
          end
          
          # Désactiver la signature manuelle pour tous les pods
          pods_project_path = 'Pods/Pods.xcodeproj'
          if File.exist?(pods_project_path)
            pods_project = Xcodeproj::Project.open(pods_project_path)
            
            pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                # Pour les pods, définir la signature en mode automatique
                config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
                config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ''
                config.build_settings['CODE_SIGN_IDENTITY'] = ''
                
                # S'assurer que la version iOS minimale est à 12.0
                if config.build_settings['IPHONEOS_DEPLOYMENT_TARGET']
                  current_version = config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'].to_f
                  if current_version < 12.0
                    config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
                  end
                end
              end
            end
            
            pods_project.save
          end
          
          # Sauvegarder le projet principal
          project.save
          EOL
          
          # Exécuter le script Ruby pour modifier les projets
          TEAM_ID="$TEAM_ID" PROVISIONING_PROFILE_NAME="${{ secrets.PROVISIONING_PROFILE_NAME }}" \
          gem install xcodeproj
          ruby update_project_settings.rb

      - name: Créer ExportOptions.plist pour App Store
        run: |
          # Obtenir le UUID du profil de provisioning
          PROFILE_UUID=$(security cms -D -i certificates/profile.mobileprovision | plutil -extract UUID xml1 -o - - | plutil -p -)
          PROFILE_UUID=${PROFILE_UUID//\"/}
          
          cat <<EOF > project/ios/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${{ secrets.APP_BUNDLE_ID }}</key>
                  <string>${PROFILE_UUID}</string>
              </dict>
              <key>destination</key>
              <string>export</string>
          </dict>
          </plist>
          EOF

      - name: Générer l IPA pour App Store avec Xcode
        run: |
          cd project/ios
          
          # Afficher l'identité de signature trouvée
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"
          SIGNING_IDENTITY=$(security find-identity -p codesigning "$KEYCHAIN_PATH" | grep "iPhone Distribution" | head -1 | sed -E 's/.*\) ([A-F0-9]+) "(.*)"/\2/')
          echo "Utilisation de l'identité de signature: $SIGNING_IDENTITY"
          
          # Archive
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -allowProvisioningUpdates \
            archive -archivePath build/Runner.xcarchive
          
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ios \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates

      - name: Sauvegarder l IPA en artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-appstore-ipa
          path: project/ios/build/ios/*.ipa
          compression-level: 0
