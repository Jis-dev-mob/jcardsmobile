name: iOS IPA Build for App Store...

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Installer SVN
        run: |
          brew install subversion

      - name: Cloner le projet depuis SVN
        run: |
          echo "Téléchargement du code depuis SVN..."
          svn checkout --username "${{ secrets.SVN_USERNAME }}" --password "${{ secrets.SVN_PASSWORD }}" https://svn.jiscomputing.com/crmconnect_mobile/ project

      - name: Installer Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.24.1
          architecture: x64

      - name: Installer les dépendances Flutter
        run: |
          cd project
          flutter pub get

      - name: Corriger la version minimale iOS
        run: |
          cd project/ios
          sed -i '' 's/platform :ios, '9.0'/platform :ios, '12.0'/' Podfile
          pod install --repo-update

      - name: Décrypter le certificat et le profil de provisioning
        run: |
          mkdir -p certificates
          echo "${{ secrets.IOS_CERTIFICATE_P12 }}" | base64 --decode > certificates/ios_cert.p12
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > certificates/profile.mobileprovision
          
          # Vérifier les fichiers
          ls -la certificates/
          echo "Taille du certificat P12: $(wc -c < certificates/ios_cert.p12) octets"
          echo "Taille du profil de provisioning: $(wc -c < certificates/profile.mobileprovision) octets"

      - name: Vérifier l intégrité du certificat
        run: |
          # Vérifier si le fichier est un certificat P12 valide
          file certificates/ios_cert.p12
          
          # Tester avec OpenSSL pour voir si le certificat est lisible
          openssl pkcs12 -info -in certificates/ios_cert.p12 -nokeys -passin pass:123456789 -nocerts || echo "⚠️ Impossible de lire le certificat avec le mot de passe"

      # Utilisation d'une action dédiée pour l'import du certificat
      - name: Import des certificats iOS
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_CERTIFICATE_P12 }}
          p12-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}
          keychain: build.keychain

      - name: Vérifier que le certificat est installé
        run: |
          echo "Liste des certificats installés dans le trousseau temporaire:"
          security find-identity -p codesigning build.keychain
          
          # Si aucun certificat n'est trouvé, afficher une erreur et arrêter le workflow
          if [[ $(security find-identity -p codesigning build.keychain | grep -c "valid identities found") == "0 valid identities found" ]]; then
            echo "❌ Aucun certificat valide n'a été trouvé. Arrêt du workflow."
            exit 1
          fi

      - name: Copier le profil de provisioning
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          UUID=$(security cms -D -i certificates/profile.mobileprovision | plutil -extract UUID xml1 -o - - | plutil -p -)
          echo "UUID du profil: $UUID"
          # Renommer le profil avec son UUID pour assurer qu'Xcode le trouve
          cp certificates/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${UUID//\"/}.mobileprovision

      - name: Compiler application iOS pour App Store
        run: |
          cd project
          flutter build ios --release --no-codesign
          
          # Afficher les infos sur le bundle Flutter généré
          ls -la build/ios/iphoneos

      - name: Créer ExportOptions.plist pour App Store
        run: |
          # Obtenir le UUID du profil de provisioning
          PROFILE_UUID=$(security cms -D -i certificates/profile.mobileprovision | plutil -extract UUID xml1 -o - - | plutil -p -)
          PROFILE_UUID=${PROFILE_UUID//\"/}
          
          cat <<EOF > project/ios/ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>compileBitcode</key>
              <true/>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${{ secrets.APP_BUNDLE_ID }}</key>
                  <string>${PROFILE_UUID}</string>
              </dict>
              <key>teamID</key>
              <string>${{ secrets.TEAM_ID }}</string>
              <key>destination</key>
              <string>export</string>
          </dict>
          </plist>
          EOF
          
          cat project/ios/ExportOptions.plist

      - name: Générer IPA pour App Store avec Xcode
        run: |
          cd project/ios
          
          # Afficher l'identité de signature trouvée
          SIGNING_IDENTITY=$(security find-identity -p codesigning build.keychain | grep "valid identities" -B 1 | head -1 | awk -F '"' '{print $2}')
          echo "Utilisation de l'identité de signature: $SIGNING_IDENTITY"
          
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            CODE_SIGN_IDENTITY="$SIGNING_IDENTITY" \
            PROVISIONING_PROFILE_SPECIFIER="${{ secrets.PROVISIONING_PROFILE_NAME }}" \
            archive -archivePath build/Runner.xcarchive

          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ios \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates

      - name: Sauvegarder IPA en artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-appstore-ipa
          path: project/ios/build/ios/*.ipa
          compression-level: 0
